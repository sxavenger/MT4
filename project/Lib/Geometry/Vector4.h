#pragma once

//-----------------------------------------------------------------------------------------
// include
//-----------------------------------------------------------------------------------------
#include <concepts>

////////////////////////////////////////////////////////////////////////////////////////////
// Vector4 class
////////////////////////////////////////////////////////////////////////////////////////////
template <typename T>
class Vector4 {
public:

	//=========================================================================================
	// constructor
	//=========================================================================================

	constexpr Vector4() = default;
	constexpr Vector4(T _x, T _y, T _z) : x(_x), y(_y), z(_z), w(1.0f) {}
	constexpr Vector4(T _x, T _y, T _z, T _w) : x(_x), y(_y), z(_z), w(_w) {}

	//=========================================================================================
	// variables
	//=========================================================================================

	T x, y, z, w;

};

//-----------------------------------------------------------------------------------------
// using
//-----------------------------------------------------------------------------------------

using Vector4f = Vector4<float>;
using Vector4i = Vector4<int>;

////////////////////////////////////////////////////////////////////////////////////////////
// Color4 class
////////////////////////////////////////////////////////////////////////////////////////////
template <typename T>
concept ColorT = std::same_as<T, int> || std::same_as<T, float>;
//!< intまたはfloatのみを使用

template <ColorT T>
class Color4 { //!< Vector4の継承でやりたい
public:

	constexpr Color4() = default;
	constexpr Color4(T _r, T _g, T _b, T _a) : r(_r), g(_g), b(_b), a(_a) {}
	
	union {
		T x, r;
	};

	union {
		T y, g;
	};

	union {
		T z, b;
	};

	union {
		T w, a;
	};

};

//-----------------------------------------------------------------------------------------
// using
//-----------------------------------------------------------------------------------------

using Color4f = Color4<float>;
using Color4i = Color4<int>;

//-----------------------------------------------------------------------------------------
// methods
//-----------------------------------------------------------------------------------------

constexpr Color4i ToColor4i(const Color4f& color);
constexpr Color4f ToColor4f(const Color4i& color);
Color4f ToColor4f(uint32_t colorCode); //!< constexprに変換


